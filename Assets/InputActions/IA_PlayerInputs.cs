//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/IA_PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IA_PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IA_PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Input"",
            ""id"": ""0bd02f02-67db-492b-aa56-75065eb958a4"",
            ""actions"": [
                {
                    ""name"": ""TurnAbility"",
                    ""type"": ""Button"",
                    ""id"": ""1bf0b2ea-1a37-42bc-a1d3-6ab79bb2cc96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GrabAbility"",
                    ""type"": ""Button"",
                    ""id"": ""8e66e6f9-cc28-42b0-9663-1ea67f62ac05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5c8b402-3a14-465f-ae03-5383477fe7f2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd483868-97d8-4df3-9d5c-93b38d3533dd"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GrabAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Input
        m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
        m_Input_TurnAbility = m_Input.FindAction("TurnAbility", throwIfNotFound: true);
        m_Input_GrabAbility = m_Input.FindAction("GrabAbility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Input
    private readonly InputActionMap m_Input;
    private List<IInputActions> m_InputActionsCallbackInterfaces = new List<IInputActions>();
    private readonly InputAction m_Input_TurnAbility;
    private readonly InputAction m_Input_GrabAbility;
    public struct InputActions
    {
        private @IA_PlayerInputs m_Wrapper;
        public InputActions(@IA_PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @TurnAbility => m_Wrapper.m_Input_TurnAbility;
        public InputAction @GrabAbility => m_Wrapper.m_Input_GrabAbility;
        public InputActionMap Get() { return m_Wrapper.m_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
        public void AddCallbacks(IInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputActionsCallbackInterfaces.Add(instance);
            @TurnAbility.started += instance.OnTurnAbility;
            @TurnAbility.performed += instance.OnTurnAbility;
            @TurnAbility.canceled += instance.OnTurnAbility;
            @GrabAbility.started += instance.OnGrabAbility;
            @GrabAbility.performed += instance.OnGrabAbility;
            @GrabAbility.canceled += instance.OnGrabAbility;
        }

        private void UnregisterCallbacks(IInputActions instance)
        {
            @TurnAbility.started -= instance.OnTurnAbility;
            @TurnAbility.performed -= instance.OnTurnAbility;
            @TurnAbility.canceled -= instance.OnTurnAbility;
            @GrabAbility.started -= instance.OnGrabAbility;
            @GrabAbility.performed -= instance.OnGrabAbility;
            @GrabAbility.canceled -= instance.OnGrabAbility;
        }

        public void RemoveCallbacks(IInputActions instance)
        {
            if (m_Wrapper.m_InputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputActions @Input => new InputActions(this);
    public interface IInputActions
    {
        void OnTurnAbility(InputAction.CallbackContext context);
        void OnGrabAbility(InputAction.CallbackContext context);
    }
}
